class Ball{
    // Responsibilities:
    // - Manage the ball's position and velocity.
    // - Detect and handle collisions with walls and paddles.
    // - Reset the ball after scoring.

    // constants.
    field int x;
    field int y;
    field int r;
    // fields
    field int velX;
    field int velY;

    // Ctor
    constructor Ball new(int velocity) {
        let x = 512 / 2; // half screen width
        let y = (256 / 2) + 16; // half screen height
        let r = 5;

        let velX = velocity; // Initial horizontal direction
        let velY = 0; // TODO
        return this;
    }

    // returns: true if ball overlapping paddle; false otherwise. 
    method boolean checkOverlap(Paddle paddle) {
        // ball (x, y) and paddle (p) borders
        var int xr, xl, yt, yb;
        var int pr, pl, pt, pb;
        // paddle booleans
        var boolean isInX;
        var boolean isInYT;
        var boolean isInYB;
        //
        let xr = x+r;
        let xl=x-r;
        let yt=y-r;
        let yb=y+r;
        //
        let pl = paddle.getX();
        let pr = paddle.getX()+paddle.getWidth();
        let pt = paddle.getY();
        let pb = paddle.getY()+paddle.getHeight();
        //
        if (paddle.getIsLeft()) {
            do Output.moveCursor(20,0);
            do Output.printString("Left-");
            do Output.printInt(xl);
            do Output.printString(",");
            do Output.printInt(pr);
            let isInX = (xl < pr);
        }
        else {
            do Output.moveCursor(20,30);
            do Output.printString("Right-");
            do Output.printInt(xr);
            do Output.printString(",");
            do Output.printInt(pl);
            let isInX = (xr > pl);
        }
        //
        if (yt > pt | yt = pt) { let isInYT=true; }
        else { let isInYT=false; }
        
        if (yb < pb | yb = pb)  { let isInYB=true; }
        else { let isInYB=false; }
        // check
        if (isInX & isInYB & isInYT)  { return true; }
        else { return false;}
    }

    method boolean isPosLegal(){
        var int xr, xl, yt, yb;
        var boolean xInRangeL, yInRangeT, xInRangeR, yInRangeB;
        // ball borders
        let xr = x+r;
        let xl=x-r;
        let yt=y-r;
        let yb=y+r;
        // left
        if ((xl > 1) | (xl = 1)) { let xInRangeL = true; }
        else { let xInRangeL = false; }

        // right
        if ((xr = 510) | (xr < 510)) { let xInRangeR = true; }
        else { let xInRangeR = false; }

        // top
        if ((yt > 16) | (yt = 16)) { let yInRangeT = true; }
        else { let yInRangeT = false; }

        // bottom
        if ((yb < 250) | (yb = 250)) { let yInRangeB = true; }
        else { let yInRangeB = false; }

        // overall
        if (xInRangeL & xInRangeR & yInRangeT & yInRangeB) {
            // do Output.moveCursor(0, 20);
            // do Output.printString("x:");
            // do Output.printInt(x);
            // do Output.printString(" y:");
            // do Output.printInt(y);
            // do Output.printString(" r:");
            // do Output.printInt(r);
            // do Output.printString(" good");
            return true;
        } else {
            // do Output.moveCursor(0, 20);
            // do Output.printString("x:");
            // do Output.printInt(x);
            // do Output.printString(" y:");
            // do Output.printInt(y);
            // do Output.printString(" r:");
            // do Output.printInt(r);
            // do Output.printString(" bad");
            return false;
        }
    }

    method void draw() {
        do Screen.setColor(true);
        do Screen.drawCircle(x, y, r);
        return;
    }

    method void erase() {
        do Screen.setColor(false);
        do Screen.drawCircle(x, y, r);
        return;
    }

    method void move () {
        if(~(isPosLegal())){
            do flipVelX();
        }
        // erase cur loc
        do erase();
        // update ball loc with vel
        let x = x + velX;
        let y = y + velY;
        // draw ball again
        do draw();
        // TODO: check wall collisions here
        return;
    }

    /**
    returns: true if ball overlapping paddle; false otherwise. 
    */
    method boolean oldCheckOverlap(Paddle paddle) {
        // ball (x, y) and paddle (p) borders
        var int xr, xl, yt, yb;
        var int pr, pl, pt, pb;
        // paddle booleans
        var boolean isInX;
        var boolean isInYT;
        var boolean isInYB;
        //
        let xr = x+r;
        let xl=x-r;
        let yt=y-r;
        let yb=y+r;
        //
        let pl = paddle.getX();
        let pr = paddle.getX()+paddle.getWidth();
        let pt = paddle.getY();
        let pb = paddle.getY()+paddle.getHeight();
        //
        if (paddle.getIsLeft()) {
            do Output.moveCursor(20,0);
            do Output.printString("Left-");
            do Output.printInt(xl);
            do Output.printString(",");
            do Output.printInt(pr);
            let isInX = (xl < pr);
        }
        else {
            do Output.moveCursor(20,30);
            do Output.printString("Right-");
            do Output.printInt(xr);
            do Output.printString(",");
            do Output.printInt(pl);
            let isInX = (xr > pl);
        }
        //
        if (yt > pt | yt = pt) { let isInYT=true; }
        else { let isInYT=false; }
        
        if (yb < pb | yb = pb)  { let isInYB=true; }
        else { let isInYB=false; }
        // check
        if (isInX & isInYB & isInYT)  { return true; }
        else { return false;}
    
        if (yb < pb | yb = pb)  { let isInYB=true; }
        else { let isInYB=false; }
        // check
        if (isInX & isInYB & isInYT)  { return true; }
        else { return false;}
    }

    method void printOverlap(boolean l, boolean r, boolean t, boolean b){
        var String res;
        var boolean flag;
        let flag = false;
        let res = "L:F R:F T:F B:F";
        if (l) {
            do res.setCharAt(2,"T");
            let flag = true;
        }
        if (r) {
            do res.setCharAt(6,"T");
            let flag = true;
        }
        if (t) {
            do res.setCharAt(10,"T");
            let flag = true;
        }
        if (b) {
            do res.setCharAt(14,"T");
            let flag = true;
        }
        if (flag) {
            do Output.moveCursor(0,20);
            do Output.printString(res);
        }
        // do Output.moveCursor(0,20);
        // do Output.printString(res);
        do res.dispose();
        return;
    }

    /**
    return: 0 for no collision; 1 for collision with left, 2 for collision with right.
    */
    method int oldCheckCollision (Paddle leftPaddle, Paddle rightPaddle) {
        var int xr, xl, yt, yb;
        // w/ right
        var boolean isBehindR;
        var boolean isAboveRightTop;
        var boolean isBelowRightBottom;
        // 
        var boolean isBehindL;
        var boolean isAboveLeftTop;
        var boolean isBelowLeftBottom;
        let xr = x+r;
        let xl=x-r;
        let yt=y-r;
        let yb=y+r;
        // assign
        if (xr > rightPaddle.getX() | xr = rightPaddle.getX()) {
            let isBehindR = true;
        } else {
            let isBehindR = false;
        }
        if (yt > rightPaddle.getY() | yt = rightPaddle.getY()) {
            let isAboveRightTop = true;
        } else {
            let isAboveRightTop = false;
        }
        if (yb < (rightPaddle.getY() + rightPaddle.getHeight()) | yb = (rightPaddle.getY() + rightPaddle.getHeight())) {
            let isBelowRightBottom = true;
        } else {
            let isBelowRightBottom = false;
        }
        // check
        if ((isBehindR) & (isAboveRightTop) & (isBelowRightBottom)) {
            return 2;
        }
        // w/ left
        // assign
        if (xl = leftPaddle.getX() | xl < leftPaddle.getX() + leftPaddle.getWidth() | xl = leftPaddle.getX() + leftPaddle.getWidth()) {
            let isBehindL = true;
        } else {
            let isBehindL = false;
        }
        if (yt > leftPaddle.getY() | yt = leftPaddle.getY()) {
            let isAboveLeftTop = true;
        } else {
            let isAboveLeftTop = false;
        }
        if (yb < (leftPaddle.getY() + leftPaddle.getHeight()) | yb = (leftPaddle.getY() + leftPaddle.getHeight())) {
            let isBelowLeftBottom = true;
        } else {
            let isBelowLeftBottom = false;
        }
        // check
        if ((isBehindL) & (isAboveLeftTop) & (isBelowLeftBottom)) {
            return 1;
        }
        // no collision at all
        return 0;
    }

    method void flipVelX (){
        do Output.moveCursor(10,10);
        // do Output.printString("in flip ");
        let velX = velX * (-1);
        return;
    }

    method void reset () {
        let x = 512 / 2; // half screen width
        let y = (256 / 2) + 16; // half screen height
        // let r = 10;

        let velX = -velX; // opposite horizontal direction
        let velY = velY; // Initial vertical direction
        return;
    }

    method void dispose() {
        do Memory.deAlloc(this);
        return;
    }

    method int getX(){
        return x;
    }

    method int getY(){
        return y;
    }

    method int getR(){
        return r;
    }

    /**
    Sets a new vector. The component of the new vector perpendicular to the given normal is equal to this vector's. The component of the new vector parallel to the normal is the negation of this vector's. May be used to simulate semi-elastic collisions if flipping a velocity vector relative to the collision normal.
    */
    method void oldFlipVelocityVector (int Ax, int Ay) {
        var int normalX;
        var int normalY;
        var int normalMag;
        var int proj;
        var int newX;
        var int newY;

        let normalX = Ax;
        let normalY = Ay;
        let normalMag = Math.sqrt((normalX * normalX) + (normalY * normalY));
        let proj = ((x * normalX) + (y * normalY)) / normalMag;
        let newX = velX;
        let newY = velY;

        if (proj < 0) {
            // if projection is negative, vector opposes normal.
            // in this case, inverse it along the projection
            let newX = velX - ((normalX * 2 * proj) / normalMag);
            let newY = velY - ((normalY * 2 * proj) / normalMag);
        }

        let velX = newX;
        let velY = newY;
        return;
    }

    // old functionality in case of errors
    method void oldFunctionality(){
        var Paddle leftPaddle;
        var Paddle rightPaddle;
        let leftPaddle = Paddle.new(1);
        let rightPaddle = Paddle.new(2);
        do oldFlipVelocityVector(1,0);
        do oldCheckCollision(leftPaddle, rightPaddle);
        do oldCheckOverlap(leftPaddle);
        return;
    }
}