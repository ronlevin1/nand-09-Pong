class GameManagar{
    field Ball ball;
    field Paddle leftPaddle;
    field Paddle rightPaddle;
    field String scoreMsg;
    field int leftScore, rightScore;
    // field String leftStr, rightStr;
    field int rightDirection, leftDirection;// the paddle's current direction: 
    // 0=none, 1=up, 2=down

    //Ctor
    constructor GameManagar new () {
        let leftPaddle = Paddle.new(true);
        let rightPaddle = Paddle.new(false);
        let leftScore = 0;
        let rightScore = 0;
        let scoreMsg = "                    "; // todo
        let rightDirection = 0;
        let leftDirection = 0;

        let ball = Ball.new(1); // TODO: change velocity
        return this;
    }

    /** Runs the game: handles the user's inputs and moves the square accordingly */
    method void run() {
        var char key;  // the key currently pressed by the user
        var boolean exit;
        let exit = false;
        do displayScore(); // todo

        while (~exit) {
            //todo: move ball here
            if((ball.checkCollision(leftPaddle, rightPaddle))=0){
                do ball.move();
            }
            else{
                do ball.flipVelX();
                do ball.move();
            }
            // waits for a key to be pressed
            while (key = 0) {
                let rightDirection = 0;
                let leftDirection = 0;
                let key = Keyboard.keyPressed();
                if((ball.checkCollision(leftPaddle, rightPaddle))=0){
                    do ball.move();
                }
                else{
                    do ball.flipVelX();
                    do ball.move();
                }
                do movePaddles();
            } 
            if (key = 81)  { let exit = true; }     // q key
            // left paddle
            if (key = 87) { let leftDirection = 1; }  // W key = up
            if (key = 83) { let leftDirection = 2; }  // S key = down
            // right paddle
            if (key = 131) { let rightDirection = 1; }   // up arrow
            if (key = 133) { let rightDirection = 2; }   // down arrow

            // waits for the key to be released
            while (~(key = 0)) {
                let key = Keyboard.keyPressed();
                if((ball.checkCollision(leftPaddle, rightPaddle))=0){
                    do ball.move();
                }
                else{
                    do ball.flipVelX();
                    do ball.move();
                }
                do movePaddles();
            }
            // todo: check score here
            do checkScore();
        } // while
        return;
    }

    method void movePaddles(){
        // left
        if (leftDirection = 1) { 
            // do Output.moveCursor(19, 0);
            // do Output.printString("In L moveUp()");
            do leftPaddle.moveUp(); 
        }
        if (leftDirection = 2) { 
            // do Output.moveCursor(20, 0);
            // do Output.printString("In L move()");
            do leftPaddle.moveDown(); 
        }
        // right
        if (rightDirection = 1) { do rightPaddle.moveUp(); }
        if (rightDirection = 2) { do rightPaddle.moveDown(); }
        //
        do Sys.wait(5);  // delays the next movement
        return;
    }

    // method void update () {
    //     //update all objects and look for collisions.
    //     // for(GameObject obj : gameObjects)
    //     //     obj.update(deltaTime);
    //     // if(camera != null)
    //     //     camera.update(deltaTime);
    //     // gameObjects.update(deltaTime);
    //     // gameObjects.handleCollisions();

    //     do checkScore();
    //     return;
    // }

    method void checkScore() {
        if (ball.getX() < 0 | ball.getX() = 0) { // Right player scores
            let rightScore = rightScore + 1;
            do ball.reset();
        }
        if (ball.getX() > 512 | ball.getX() = 512) { // Left player scores
            let leftScore = leftScore + 1;
            do ball.reset();
        }
        do displayScore();
        return;
    }

    //TODO: fix - msg is not displayed with numbers
    method void resetScoreMsg(){
        // push score field into vars
        var String l; 
        var String r;
        // do l.setInt(leftScore);
        // do r.setInt(rightScore);

        // update score message
        do scoreMsg.setCharAt(0,"L");
        do scoreMsg.setCharAt(1,"e");
        do scoreMsg.setCharAt(2,"f");
        do scoreMsg.setCharAt(3,"t");
        do scoreMsg.setCharAt(4," ");
        do scoreMsg.setCharAt(5,digitToString(leftScore)); // leftScore
        do scoreMsg.setCharAt(6," ");
        do scoreMsg.setCharAt(7,":");
        do scoreMsg.setCharAt(8," ");
        do scoreMsg.setCharAt(9,digitToString(rightScore)); // rightScore
        do scoreMsg.setCharAt(10," ");
        do scoreMsg.setCharAt(11,"R");
        do scoreMsg.setCharAt(12,"i");
        do scoreMsg.setCharAt(13,"g");
        do scoreMsg.setCharAt(14,"h");
        do scoreMsg.setCharAt(15,"t");
        do scoreMsg.setCharAt(16,"");
        do scoreMsg.setCharAt(17,"");
        do scoreMsg.setCharAt(18,"");
        do scoreMsg.setCharAt(19,"");

        // let newScoreMsg = "Left ";
        // do newScoreMsg.appendChar(leftScore);
        // do newScoreMsg.appendChar(" ");
        // do newScoreMsg.appendChar(":");
        // do newScoreMsg.appendChar(" ");
        // do newScoreMsg.appendChar(rightScore);
        // do newScoreMsg.appendChar(" ");
        // do newScoreMsg.appendChar("R");
        // do newScoreMsg.appendChar("i");
        // do newScoreMsg.appendChar("g");
        // do newScoreMsg.appendChar("h");
        // do newScoreMsg.appendChar("t");
        // do newScoreMsg.setCharAt(5, 7);
        // do newScoreMsg.setCharAt(9, 4);
        // do newScoreMsg.setCharAt(5, leftScore);
        // do newScoreMsg.setCharAt(9, rightScore);

        return;
    }

    method String digitToString(int digit) {
        var String result;
        let result = String.new(1);
        do result.appendChar(digit + 48); // ASCII value of '0' is 48
        return result;
    }

    method void displayScore() {
        // NOTE: Y dims of game field are: 16 < Ydims < 250
        var int y;
        let y = 13;
        do Screen.drawLine(0, y, 511, y);
        do Screen.drawLine(0, y+1, 511, y+1);
        do Screen.drawLine(0, 255, 511, 255);
        do Screen.drawLine(0, 254, 511, 254);
        do Screen.drawLine(0, 253, 511, 253);

        do resetScoreMsg();
        do Output.moveCursor(0, 0);
        // do Output.printString(scoreMsg);
        do Output.printString("Left ");
        do Output.printString(digitToString(leftScore)); // todo: change to score field
        do Output.printString(" : ");
        do Output.printString(digitToString(rightScore));
        do Output.printString(" Right");
        return;
    }

    method void dispose() {
        do ball.dispose();
        do leftPaddle.dispose();
        do rightPaddle.dispose();
        do Memory.deAlloc(this);
        return;
    }
}