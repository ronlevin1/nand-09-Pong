class GameManagar{
    field Ball ball;
    field Paddle leftPaddle;
    field Paddle rightPaddle;
    field String scoreMsg;
    field int leftScore, rightScore;
    // field String leftStr, rightStr;
    field int rightDirection, leftDirection;// the paddle's current direction: 
    // 0=none, 1=up, 2=down
    // user input params
    field int velocity;
    field int numOfRounds;
    field boolean exit;

    //Ctor
    constructor GameManagar new () {
        let leftPaddle = Paddle.new(true);
        let rightPaddle = Paddle.new(false);
        let leftScore = 0;
        let rightScore = 0;
        let scoreMsg = "                    "; // todo
        let rightDirection = 0;
        let leftDirection = 0;
        let exit = false;
        return this;
    }

    /** Runs the game: handles the user's inputs and moves the square accordingly */
    method void run() {
        var char key;  // the key currently pressed by the user
        // var boolean exit;
        // let exit = false;
        do displayScore();
        do leftPaddle.draw();
        do rightPaddle.draw();

        while (~exit) {
            do moveBall();
            // waits for a key to be pressed
            while (key = 0) {
                let rightDirection = 0;
                let leftDirection = 0;
                let key = Keyboard.keyPressed();
                do moveBall();
                do movePaddles();
            } 
            if (key = 81)  { let exit = true; }     // q key
            // left paddle
            if (key = 87) { let leftDirection = 1; }  // W key = up
            if (key = 83) { let leftDirection = 2; }  // S key = down
            // right paddle
            if (key = 131) { let rightDirection = 1; }   // up arrow
            if (key = 133) { let rightDirection = 2; }   // down arrow

            // waits for the key to be released
            while (~(key = 0)) {
                let key = Keyboard.keyPressed();
                do moveBall();
                do movePaddles();
            }
            do movePaddles();
        } // while
        return;
    }

    method void moveBall(){
        var boolean flag;
        let flag = false;

        if((checkOverlap(leftPaddle, true))){
            let flag = true;
            do ball.draw();
            do ball.flipVelX();
        }
        if((checkOverlap(rightPaddle, false))){
            let flag = true;
            do ball.draw();
            do ball.flipVelX();
        }
        // uncomment for de-bugging.
        if(flag){
            // do Output.moveCursor(15,15);
            // do Output.printString("overlapping");
        }
        else{
            // do Output.moveCursor(15,15);
            // do Output.printString("NOPE       ");
        }
        
        do ball.move();
        do checkScore();
        return;
    }
    
    /**
    returns: true if ball overlapping paddle; false otherwise. 
    */
    method boolean checkOverlap(Paddle paddle, boolean isLeft) {
        // ball (x, y) and paddle (p) borders
        var int xr, xl, yt, yb;
        var int pr, pl, pt, pb;

        // overlap booleans
        // var boolean isInXR;
        // var boolean isInXL;
        var boolean isInX;
        var boolean isInYT;
        var boolean isInYB;

        // ball borders
        let xr = ball.getX()+ball.getR();
        let xl= ball.getX()-ball.getR();
        let yt= ball.getY()-ball.getR();
        let yb= ball.getY()+ball.getR();

        // paddle borders
        let pl = paddle.getX();
        let pr = paddle.getX()+paddle.getWidth();
        let pt = paddle.getY();
        let pb = paddle.getY()+paddle.getHeight();
        //
        if (isLeft) {
            // do Output.moveCursor(20,0);
            // do Output.printString("Left-");
            // do Output.printInt(xl);
            // do Output.printString(",");
            // do Output.printInt(pr);
            // let isInX = (xl < pr);
            if ((xl < pr) | (xl = pr)) { let isInX = true; }
            else {let isInX = false;}
        }
        else {
            // do Output.moveCursor(20,30);
            // do Output.printString("Right-");
            // do Output.printInt(xr);
            // do Output.printString(",");
            // do Output.printInt(pl);
            // let isInX = (xr > pl);
            if ((xr > pl) | (xr = pl)) { let isInX = true; }
            else {let isInX = false;}
        }
        //
        if ((yt > pt) | (yt = pt)) { let isInYT=true; }
        else { let isInYT=false; }
        
        if ((yb < pb) | (yb = pb))  { let isInYB=true; }
        else { let isInYB=false; }
        // for debugging: print
        // do printOverlap(isInXL, isInXR, isInYT, isInYB);

        // check overall
        if (isInX & isInYB & isInYT)  { return true; }
        // if (isInXR & isInXL & isInYB & isInYT)  { return true; }
        else { return false;}
    }

    method void checkScore() {
        var int leftLim, rightLim;
        var boolean flag;
        var int gap;
        var String msg1;
        //
        let gap = 15;
        let leftLim = leftPaddle.getX() - gap;
        let rightLim = rightPaddle.getX() + rightPaddle.getWidth() + gap;
        let msg1 = "GOAL!";
        //
        if (ball.getX() < leftLim) { // Right player scores
            let rightScore = rightScore + 1;
            let flag = true;
        }
        if (ball.getX() > rightLim) { // Left player scores
            let leftScore = leftScore + 1;
            let flag = true;
        }
        if (flag) {
            do displayScore();
            // print GOAL and erase afterwards
            do Output.moveCursor(11,25);
            do Output.printString(msg1);
            do Sys.wait(2000);  // delays the next movement
            let msg1 = "                  ";
            do Output.moveCursor(11,31);
            do Output.printString(msg1);
            do ball.erase();
            do ball.reset();
        }
        // check game end
        if(rightScore + leftScore = numOfRounds){
            do end();
        }
        do msg1.dispose();
        return;
    }

    method void movePaddles(){
        // left
        if (leftDirection = 1) { 
            do leftPaddle.moveUp(); 
        }
        if (leftDirection = 2) { 
            do leftPaddle.moveDown(); 
        }
        // right
        if (rightDirection = 1) { do rightPaddle.moveUp(); }
        if (rightDirection = 2) { do rightPaddle.moveDown(); }
        //
        do Sys.wait(5);  // delays the next movement
        return;
    }

    method String digitToString(int digit) {
        var String result;
        let result = String.new(1);
        do result.appendChar(digit + 48); // ASCII value of '0' is 48
        return result;
    }

    method void displayScore() {
        // NOTE: Y dims of game field are 16 to 250
        var int y;
        let y = 13;
        do Screen.drawLine(0, y, 511, y);
        do Screen.drawLine(0, y+1, 511, y+1);
        do Screen.drawLine(0, 255, 511, 255);
        do Screen.drawLine(0, 254, 511, 254);
        do Screen.drawLine(0, 253, 511, 253);

        do Output.moveCursor(0, 0);
        // do Output.printString(scoreMsg);
        do Output.printString("Left ");
        do Output.printString(digitToString(leftScore));
        do Output.printString(" : ");
        do Output.printString(digitToString(rightScore));
        do Output.printString(" Right");
        return;
    }

    /**
    setup game env
    */
    method void setup(){
        // read input #rounds
        // read input difficulty level -> ball velocity [1,2,3]
        // clear screen (game printing is done in run() method)
        var String msg1, msg2, msg3;
        var int rounds, vel;
        let msg1 = "Enter number of rounds: ";
        let msg2 = "Enter difficulty level (1-3): ";
        let msg3 = "OK, got it.";
        //
        do Screen.clearScreen();
        // handle rounds input and make sure it is between 1 and 9
        let rounds = Keyboard.readInt(msg1);
        let rounds = Math.min(rounds, 9);
        let rounds = Math.max(rounds, 1);
        // hangl vel input: read and make sure vel is between 1 and 3
        let vel = Keyboard.readInt(msg2);
        let vel = Math.min(vel, 3);
        let vel = Math.max(vel, 1);
        // set class fields
        let numOfRounds = rounds;
        let ball = Ball.new(vel); // todo: change by input val
        // "OK, got it.""
        do Output.printString(msg3);
        //
        do Sys.wait(2000);
        do Screen.clearScreen();
        do msg1.dispose(); 
        do msg2.dispose();
        do msg3.dispose();
        return;
    }

    /**
    end game and sum results
    */
    method void end(){
        var String msg1,msg2,msg3;
        let msg1 = "Game Finished!";
        let msg2 = "Final Score: ";

        do Screen.clearScreen();
        do Output.moveCursor(11,23);
        do Output.printString(msg1);
        do Output.println();

        do Output.moveCursor(14,20);
        do Output.printString(msg2);
        do Output.printInt(leftScore);
        do Output.printString(" - ");
        do Output.printInt(rightScore);
        do Output.println();
        // check winner
        if (leftScore > rightScore) {
            let msg3 = "NO! Left player wins !!!";
        }
        else{
            if (leftScore < rightScore) {
                let msg3 = "Aaaa Right player wins ..!!!";
            }
            else{
                let msg3 = "Its a Tie !!!!!!";
            }
        }
        do Output.moveCursor(17,20);
        do Output.printString(msg3);
        do Sys.wait(5000);
        do msg1.dispose();
        do msg2.dispose();
        do msg3.dispose();
        do Screen.clearScreen();
        let exit = true; // set class exit flag
        return;
    }

    method void dispose() {
        do ball.dispose();
        do leftPaddle.dispose();
        do rightPaddle.dispose();
        do Memory.deAlloc(this);
        return;
    }
}